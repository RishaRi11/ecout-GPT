### main.py
from dotenv import load_dotenv
load_dotenv() 
import threading
import queue
import time
import subprocess
import os
from datetime import datetime
import customtkinter as ctk
import re
from PIL import Image
import tkinter as tk   

import AudioRecorder
from AudioTranscriber import AudioTranscriber
from gpt_manager import GPTManager
from log_manager import LogManager
import TranscriberModels
from config_manager import load_config, save_config 


# ---------- CONFIG DEFAULTS ----------
CONTEXT_DEPTH_DEFAULT = 3
PAUSE_THRESHOLD_DEFAULT = 3.0
MIN_USER_SPEECH_DEFAULT = 1.5
BTN_ICON_FONT = ("Arial", 18)

load_dotenv()  # –ø–æ–¥–≥—Ä—É–∂–∞–µ–º OPENAI_API_KEY –∏–∑ .env

FONT_CFG = {
    "speaker": {"family": "Arial",  "size": 16, "bold": False, "italic": False, "color": "#33ffaa"},
    "user":    {"family": "Arial",  "size": 16, "bold": False, "italic": False, "color": "#ffaa33"},
    "gpt":     {"family": "Courier","size": 16, "bold": False, "italic": True,  "color": "#c4ffee"}
}
# ---------- UI helpers ----------

# –í —Ñ–∞–π–ª–µ main.py, –ø—Ä–∏–º–µ—Ä–Ω–æ —Å—Ç—Ä–æ–∫–∞ 34
def write_transcript(tb: ctk.CTkTextbox, items, start: int, end: int):
    # –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º–∏/–Ω–æ–≤—ã–º–∏ –≤–µ—Ä—Å–∏—è–º–∏ customtkinter
    inner = getattr(tb, "textbox", None) or tb._textbox        

    inner.configure(state="normal")
    inner.delete("1.0", "end")

    # --- –∑–∞–¥–∞—ë–º (–∏–ª–∏ –ø–µ—Ä–µ-–∑–∞–¥–∞—ë–º) —Ç–µ–≥–∏ –ø–æ–¥ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç–∏–ª–∏
    def _tag_style(cfg):
        styles = []
        if cfg["bold"]:
            styles.append("bold")
        if cfg["italic"]:
            styles.append("italic")
        return (cfg["family"], cfg["size"]) if not styles else (cfg["family"], cfg["size"], " ".join(styles))

    inner.tag_configure("speaker_tag", font=_tag_style(FONT_CFG["speaker"]),
                        foreground=FONT_CFG["speaker"]["color"])
    inner.tag_configure("user_tag",    font=_tag_style(FONT_CFG["user"]),
                        foreground=FONT_CFG["user"]["color"])
        # –§–æ–Ω –¥–ª—è —Å—Ç—Ä–æ–∫, –ø–æ–ø–∞–¥–∞—é—â–∏—Ö –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
    inner.tag_configure("ctx_tag", background="#444444")

    spk_index = 0
    for text, _, role in items:
        tag = "speaker_tag" if role == "Speaker" else "user_tag"
        extra = ()
        if role == "Speaker":
            if start <= spk_index <= end:
                extra = ("ctx_tag",)
            spk_index += 1
        inner.insert("end", text, (tag, *extra))

    inner.configure(state="disabled")

def write_in_textbox(tb: ctk.CTkTextbox, text: str):
    tb.configure(state="normal")
    tb.delete("0.0", "end")
    tb.insert("0.0", text)
    tb.configure(state="disabled")


# ---------- UI creation ----------

def create_ui(root, transcriber, gpt_mgr, mic_rec, spk_rec, config):
    ctk.set_appearance_mode("dark")
    ctk.set_default_color_theme("dark-blue")

    root.title("Ecoute + GPT")
    root.geometry("1200x650")
    root.grid_columnconfigure(0, weight=1)
    root.grid_columnconfigure(1, weight=0)
    root.grid_columnconfigure(2, weight=1)
    root.grid_rowconfigure(0, weight=1)

    # --- Left: transcript ---
    transcript_tb = ctk.CTkTextbox(root, font=("Arial", 16), wrap="word", text_color="#FFFCF2")
    transcript_tb.grid(row=0, column=0, sticky="nsew", padx=(10, 5), pady=10)

    # --- Right: GPT answer ---
    gpt_tb = ctk.CTkTextbox(root, font=("Arial", 16, "italic"), wrap="word", text_color="#C4FFEE")
    gpt_tb.grid(row=0, column=2, sticky="nsew", padx=(5, 10), pady=10)

    # --- Vertical range slider for context selection ---
    try:
        range_slider = ctk.CTkRangeSlider(
            root,
            from_=0,
            to=1,
            orientation="vertical",
            number_of_steps=1,
            command=lambda v: update_context_range(int(v[0]), int(v[1])),
            button_corner_radius=0
        )
    except AttributeError:
        range_slider = ctk.CTkSlider(root, orientation="vertical")
    range_slider.grid(row=0, column=1, sticky="ns", pady=10)
    if hasattr(range_slider, "set"):
        range_slider.set(transcriber.context_start, transcriber.context_end)

    # --- –¥–µ–ª–∞–µ–º –æ–±–∞ textbox-–∞ –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è/–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è ---
    for tb in (transcript_tb, gpt_tb):
        tb.bind("<Key>", lambda e: "break")   # –±–ª–æ–∫–∏—Ä—É–µ–º –≤–≤–æ–¥, –Ω–æ –æ—Å—Ç–∞–≤–ª—è–µ–º Ctrl-C

    # GPT textbox —à—Ä–∏—Ñ—Ç
    gpt_tb.configure(
            font=(FONT_CFG["gpt"]["family"],
                FONT_CFG["gpt"]["size"],
                "italic" if FONT_CFG["gpt"]["italic"] else ""),
            text_color=FONT_CFG["gpt"]["color"]
            )
    # --- Bottom panel ---
    bottom = ctk.CTkFrame(root)
    bottom.grid(row=1, column=0, columnspan=3, sticky="ew", padx=10, pady=(0, 10))
    bottom.grid_columnconfigure(0, weight=1)    # –ª–µ–≤—ã–µ –∫–Ω–æ–ø–∫–∏ —Ç—è–Ω—É—Ç—Å—è –≤–ª–µ–≤–æ
    bottom.grid_columnconfigure(1, weight=1)    # –ø—Ä–∞–≤—ã–µ —Ç—è–Ω—É—Ç—Å—è –≤–ø—Ä–∞–≤–æ

    # ----- –õ–ï–í–ê–Ø –≥—Ä—É–ø–ø–∞ (Mute + Settings) ------------------
    left_box = ctk.CTkFrame(bottom, fg_color="transparent")
    left_box.grid(row=0, column=0, sticky="w")

    # --- –¥–∏–Ω–∞–º–∏–∫ —Å –ø–µ—Ä–µ—á—ë—Ä–∫–Ω—É—Ç–æ–π –ª–∏–Ω–∏–µ–π -------------------------------
    # –§–∞–π–ª:   assets/muted.png   (18√ó18 px, –±–µ–ª—ã–π/–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π)
    try:
        icon_muted = ctk.CTkImage(
            light_image=Image.open(os.path.join("assets", "muted.png")),
            size=(18, 18)
        )
    except Exception as e:
        print("Icon load error:", e)
        icon_muted = None  # –Ω–∞ —Å–ª—É—á–∞–π –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –∫–∞—Ä—Ç–∏–Ω–∫–∏
        
    # –†–∞–∑–º–µ—â–∞–µ–º —Å–ª–µ–≤–∞ –æ—Ç –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–µ–π
    ctk.CTkLabel(left_box, image=icon_muted, text="").pack(side="left", padx=(0, 2))

    # --- Mic -----------------------------------------------------------------
    mute_mic_var = ctk.BooleanVar(value=True)
    def _toggle_mic():
        mic_rec.set_muted(not mute_mic_var.get())
    ctk.CTkSwitch(left_box,
                  text=" Mic",
                  variable=mute_mic_var,
                  command=_toggle_mic
                 ).pack(side="left", padx=(4,0))

    # –≤—Å—Ç–∞–≤–ª—è–µ–º –í–¢–û–†–£–Æ –∏–∫–æ–Ω–∫—É üîá –ø–µ—Ä–µ–¥ Speaker-switch
    ctk.CTkLabel(left_box, image=icon_muted, text="").pack(side="left", padx=(12,2))

    # --- Speaker -------------------------------------------------------------
    mute_spk_var = ctk.BooleanVar(value=True)
    def _toggle_spk():
        spk_rec.set_muted(not mute_spk_var.get())

    ctk.CTkSwitch(left_box,
                  text=" Speaker",
                  variable=mute_spk_var,
                  command=_toggle_spk
                 ).pack(side="left", padx=(4,0))

    ctk.CTkButton(left_box, text="‚öô", width=30, font=("Arial", 16),
                  command=lambda: open_settings(root, transcriber)
                 ).pack(side="left", padx=10)
    
    ctk.CTkButton(left_box, text="üåê", width=30, font=("Arial", 18),
                  command=lambda: open_language_settings(root, transcriber, config)
                  ).pack(side="left", padx=4)
    

    # ----- –ü–†–ê–í–ê–Ø –≥—Ä—É–ø–ø–∞ (GPT-—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ) ------------------
    right_box = ctk.CTkFrame(bottom, fg_color="transparent")
    right_box.grid(row=0, column=1, sticky="e")

    auto_var = ctk.BooleanVar(value=True)
    ctk.CTkSwitch(right_box, text="GPT ON/OFF",
                  variable=auto_var
                 ).pack(side="left", padx=10)
    gpt_mgr.set_auto_var(auto_var)

    ctk.CTkButton(right_box, text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—É–ª",
                  command=gpt_mgr.manual_send
                 ).pack(side="left", padx=10)

    ctk.CTkButton(right_box, text="–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –æ—Ç–≤–µ—Ç",
                  command=gpt_mgr.repeat_last
                 ).pack(side="left", padx=10)
    
    # ---------------------------------------------
    # –ë–õ–û–ö: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—ä—ë–º–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏ –µ–≥–æ –ø—Ä–µ–≤—å—é
    # ---------------------------------------------
    # Frame –¥–ª—è –ø–æ–ª–∑—É–Ω–∫–∞ –∏ –æ–∫–Ω–∞ –ø—Ä–µ–≤—å—é –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    context_frame = ctk.CTkFrame(bottom, fg_color="transparent")
    context_frame.grid(row=1, column=0, columnspan=3, sticky="ew", padx=10, pady=(5, 10))
    context_frame.grid_columnconfigure(0, weight=1)

    ctk.CTkLabel(context_frame, text="–ö–æ–Ω—Ç–µ–∫—Å—Ç:").grid(row=0, column=0, sticky="w", padx=(0,5), pady=(0,3))

    # –û–∫–Ω–æ –ø—Ä–µ–≤—å—é —Ç–æ–≥–æ, —á—Ç–æ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –≤ GPT
    prompt_preview = ctk.CTkTextbox(
        context_frame,
        font=(FONT_CFG["gpt"]["family"], FONT_CFG["gpt"]["size"], "italic" if FONT_CFG["gpt"]["italic"] else ""),
        height=100,
        wrap="word",
        text_color=FONT_CFG["gpt"]["color"]
    )
    prompt_preview.grid(row=1, column=0, columnspan=2, sticky="nsew", padx=(0, 5), pady=(5, 0))
    prompt_preview.configure(state="disabled")

    # –§—É–Ω–∫—Ü–∏—è-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–ª–∑—É–Ω–∫–∞
    def update_context_range(start: int, end: int):
        if end < start:
            start, end = end, start
        spk_total = len(transcriber.transcript_data["Speaker"])
        max_val = max(spk_total - 1, 0)
        start = max(0, min(start, max_val))
        end = max(0, min(end, max_val))
        if end < start:
            end = start
        transcriber.context_start = start
        transcriber.context_end = end


        current_list = transcriber.get_current_prompt()
        preview_text = "".join(current_list)

        write_transcript(transcript_tb, transcriber.get_transcript(), start, end)

        prompt_preview.configure(state="normal")
        prompt_preview.delete("0.0", "end")
        prompt_preview.insert("0.0", preview_text)
        prompt_preview.configure(state="disabled")

    def update_slider_limits():
        spk_total = len(transcriber.transcript_data["Speaker"])
        max_val = max(spk_total - 1, 0)
        if hasattr(range_slider, "configure"):
            range_slider.configure(to=max_val, number_of_steps=max(1, max_val))
        if transcriber.context_start > max_val:
            transcriber.context_start = max_val
        if transcriber.context_end > max_val:
            transcriber.context_end = max_val
        if transcriber.context_end < transcriber.context_start:
            transcriber.context_start = transcriber.context_end
        if hasattr(range_slider, "set"):
            range_slider.set(transcriber.context_start, transcriber.context_end)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–µ–≤—å—é –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    update_context_range(transcriber.context_start, transcriber.context_end)


    def _poll_events():
        # –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –æ—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
        if transcriber.transcript_changed_event.is_set():
            update_slider_limits()
            update_context_range(transcriber.context_start, transcriber.context_end)
            transcriber.transcript_changed_event.clear()

        # –Ω–æ–≤—ã–π –æ—Ç–≤–µ—Ç GPT
        if gpt_mgr.answer_changed.is_set():
            write_in_textbox(gpt_tb, gpt_mgr.latest_answer)
            gpt_mgr.answer_changed.clear()

        root.after(200, _poll_events)    # –æ–ø—Ä–∞—à–∏–≤–∞–µ–º ~5 —Ä–∞–∑/—Å–µ–∫

    _poll_events()   # -> –ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫
 

# ---------- Settings window ----------

def open_settings(parent, transcriber):
    """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫."""

    # –µ—Å–ª–∏ —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–æ
    if getattr(parent, "_settings_win", None) and parent._settings_win.winfo_exists():
        parent._settings_win.focus_force()
        return

    win = ctk.CTkToplevel(parent)
    win.title("–ù–∞—Å—Ç—Ä–æ–π–∫–∏")
    win.resizable(False, False)
    win.transient(parent)
    win.grab_set()
    parent._settings_win = win

    # helper –¥–ª—è –∫–∞–∂–¥–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (slider + entry)
    def slider_block(row, label, from_, to_, step, initial):
        """
        –°–æ–∑–¥–∞—ë—Ç –±–ª–æ–∫: Label + Slider + Entry.  –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è:
        ‚Ä¢ —Å–ª–∞–π–¥–µ—Ä ‚ÜîÔ∏é DoubleVar `var`
        ‚Ä¢ Entry ‚ÜîÔ∏é StringVar `str_var`
        –ü—Ä–∏ –≤–≤–æ–¥–µ –≤ Entry:   1) –∑–∞–ø—è—Ç–∞—è ‚Üí —Ç–æ—á–∫–∞
                             2) –¥–æ–ø—É—Å–∫–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ 0-9 –∏ ¬´.¬ª
                             3) –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞ (–≤–æ –≤—Ä–µ–º—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
        –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ ‚Üí –æ–±–Ω–æ–≤–ª—è–µ–º `var`  ‚Üí –¥–≤–∏–≥–∞–µ—Ç—Å—è —Å–ª–∞–π–¥–µ—Ä.
        """
        # ---------- –≤–∏–∑—É–∞–ª—å–Ω–∞—è —á–∞—Å—Ç—å ----------
        ctk.CTkLabel(win, text=label).grid(row=row, column=0, columnspan=3,
                                           pady=(10 if row == 0 else 15, 0))

        var = ctk.DoubleVar(value=float(initial))          # —Ö—Ä–∞–Ω–∏—Ç –≤–∞–ª–∏–¥–Ω—ã–π float
        slider = ctk.CTkSlider(win, from_=from_, to=to_,
                               number_of_steps=int((to_ - from_) / step),
                               variable=var)
        slider.grid(row=row + 1, column=0, columnspan=2, padx=20, sticky="ew")

        str_var = ctk.StringVar(value=str(initial))        # —Å—Ç—Ä–æ–∫–∞ –∏–∑ Entry
        entry = ctk.CTkEntry(win, width=60, textvariable=str_var)
        entry.grid(row=row + 1, column=2, padx=(0, 15))

        # ---------- —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è ----------
        # a) –¥–≤–∏–∂–µ–Ω–∏–µ —Å–ª–∞–π–¥–µ—Ä–∞ ‚Üí –æ–±–Ω–æ–≤–ª—è–µ–º Entry
        def _slider_changed(val):
            fval = round(float(val), 2)
            var.set(fval)               # –¥–µ—Ä–∂–∏–º var ¬´—á–∏—Å—Ç—ã–º¬ª
            str_var.set(str(fval))      # –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        slider.configure(command=_slider_changed)

        # b) –ø–µ—á–∞—Ç—å –≤ Entry ‚Üí –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ var/—Å–ª–∞–π–¥–µ—Ä–∞
        last_ok = {"txt": str(initial)}   # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤–∞–ª–∏–¥–Ω–æ–µ
        def _entry_trace(*_):
            raw = str_var.get().replace(",", ".")          # –∑–∞–ø—è—Ç–∞—è ‚Üí —Ç–æ—á–∫–∞
            if raw == "":                                  # –ø—É—Å—Ç–æ –≤–æ –≤—Ä–µ–º—è –≤–≤–æ–¥–∞
                return
            # —Ç–æ–ª—å–∫–æ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã (—Ü–∏—Ñ—Ä—ã –∏ –æ–¥–Ω–∞ —Ç–æ—á–∫–∞)
            if not re.fullmatch(r"\d*\.?\d*", raw):
                str_var.set(last_ok["txt"])
                return
            try:
                f = float(raw)
            except ValueError:
                str_var.set(last_ok["txt"])
                return
            # –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ?
            if from_ <= f <= to_:
                last_ok["txt"] = raw
                var.set(f)              # –æ–±–Ω–æ–≤–∏—Ç —Å–ª–∞–π–¥–µ—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
            else:
                str_var.set(last_ok["txt"])
        str_var.trace_add("write", _entry_trace)

        return var

    # ctx_var = slider_block(0, "–ì–ª—É–±–∏–Ω–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (—Ñ—Ä–∞–∑—ã)", 1, 10, 1, transcriber.context_depth)
    pause_var = slider_block(2, "–ü–∞—É–∑–∞ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ (—Å–µ–∫)", 0.5, 10, 0.5, transcriber.pause_threshold)
    dur_var = slider_block(4, "–ú–∏–Ω. –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∞—à–µ–π —Ä–µ—á–∏ (—Å–µ–∫)", 0.5, 5, 0.5, transcriber.min_user_speech)

    def save():
        # transcriber.context_depth = int(ctx_var.get())
        transcriber.pause_threshold = float(pause_var.get())
        transcriber.min_user_speech = float(dur_var.get())
        win.destroy()

    ctk.CTkButton(win, text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", command=save).grid(row=6, column=0, columnspan=3, pady=20)

def open_language_settings(parent, transcriber, config):
    if getattr(parent, "_lang_win", None) and parent._lang_win.winfo_exists():
        parent._lang_win.focus_force()
        return

    win = ctk.CTkToplevel(parent)
    win.title("–í—ã–±–æ—Ä —è–∑—ã–∫–∞")
    win.resizable(False, False)
    win.transient(parent)
    win.grab_set()
    parent._lang_win = win

    options = {
        "–ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ": None,
        "–†—É—Å—Å–∫–∏–π (ru)": "ru",
        "English (en)": "en",
        "Deutsch (de)": "de",
        "Fran√ßais (fr)": "fr",
        "Espa√±ol (es)": "es",
        "‰∏≠Êñá (zh)": "zh",
        "Êó•Êú¨Ë™û (ja)": "ja",
    }

    current_code = transcriber.get_language()
    current_name = next((k for k, v in options.items() if v == current_code), "–†—É—Å—Å–∫–∏–π (ru)")
    var = ctk.StringVar(value=current_name)

    ctk.CTkLabel(win, text="–Ø–∑—ã–∫ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è:").pack(pady=(10, 5))
    menu = ctk.CTkOptionMenu(win, variable=var, values=list(options.keys()))
    menu.pack(padx=20, pady=10)

    def _save():
        lang_code = options[var.get()] or "ru"
        transcriber.set_language(lang_code)
        config["language"] = lang_code
        save_config(config)
        win.destroy()

    ctk.CTkButton(win, text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", command=_save).pack(pady=20)



# ---------- main() ----------

def main():
    # check ffmpeg
    try:
        subprocess.run(["ffmpeg", "-version"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    except FileNotFoundError:
        print("FFmpeg –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏ ffmpeg –∏ –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
        return
    
    config = load_config()        
    root = ctk.CTk()

    speaker_q = queue.Queue()
    mic_q = queue.Queue()

    mic_rec = AudioRecorder.DefaultMicRecorder()
    mic_rec.record_into_queue(mic_q)
    time.sleep(1)
    spk_rec = AudioRecorder.DefaultSpeakerRecorder()
    spk_rec.record_into_queue(speaker_q)

    model = TranscriberModels.get_model(use_api=True)

    log_mgr = LogManager(log_dir=os.path.join(os.path.dirname(__file__), "log"))

    transcriber = AudioTranscriber(
        mic_rec.source,
        spk_rec.source,
        model,
        context_depth=CONTEXT_DEPTH_DEFAULT,
        pause_threshold=PAUSE_THRESHOLD_DEFAULT,
        min_user_speech=MIN_USER_SPEECH_DEFAULT,
        logger=log_mgr,
        language=config.get("language", "ru"),
    )

    gpt_mgr = GPTManager(transcriber)

    thr = threading.Thread(target=transcriber.transcribe_audio_queue, args=(speaker_q, mic_q))
    thr.daemon = True
    thr.start()

    create_ui(root, transcriber, gpt_mgr, mic_rec, spk_rec, config)

    root.mainloop()


if __name__ == "__main__":
    main()
